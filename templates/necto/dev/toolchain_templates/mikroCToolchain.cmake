%SDK_VARIABLE_VALUES%

set(COMPILER_FLAGS %COMPILER_FLAG_VALUES% "-DBG")
set(LINKER_FLAGS %LINKER_FLAG_VALUES% "-DBG")

string(TOLOWER ${CMAKE_BUILD_TYPE} build_type)
set(DEBUG_SUPPORTED %IS_DEBUG_SUPPORTED%)

if (DEBUG_SUPPORTED AND build_type STREQUAL "debug")
    list(APPEND COMPILER_FLAGS "-UICD")
    list(APPEND LINKER_FLAGS "-UICD")
endif()

file(TO_CMAKE_PATH "%JCFG_FILE_VALUE%" JCFG_FILE_VAL)
set(JCFG_FILE  ${JCFG_FILE_VAL} CACHE STRING "" FORCE)

file(TO_CMAKE_PATH "%CORE_LIB_VALUE%" CORE_LIB_VAL)
set(CORE_LIB ${CORE_LIB_VAL} CACHE STRING "" FORCE)

set(SEARCH_PATHS "%SEARCH_PATH_VALUES%" CACHE STRING "" FORCE)

set(CMAKE_MikroC_COMPILER "%C_COMPILER%" CACHE INTERNAL "")
set(CMAKE_MikroC_COMPILER_ID "mikroC" CACHE INTERNAL "")

set(CMAKE_MikroC_OUTPUT_EXTENSION_REPLACE 1)
set(CMAKE_MikroC_OUTPUT_EXTENSION "%OUTPUT_EXTENSION%")

# set CMAKE_SYSTEM_NAME to define build as CMAKE_CROSSCOMPILING
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_VERSION 1)

SET(CMAKE_MikroC_COMPILER_WORKS TRUE CACHE INTERNAL "")
SET(CMAKE_MikroC_COMPILER_FORCED TRUE CACHE INTERNAL "")
SET(CMAKE_MikroC_COMPILER_ID_RUN TRUE CACHE INTERNAL "")

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

# add compiler option flags
add_compile_options(${COMPILER_FLAGS})
message(INFO ": ${COMPILER_FLAGS}")
# add link option flags
add_link_options(${LINKER_FLAGS})

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

file(TO_CMAKE_PATH "%MIKROSDK_PATH%" MIKROSDK_PATH)
file(TO_CMAKE_PATH "%MIKROC_CORE_PATH%" MIKROC_CORE_PATH)


set(MIKROSDK_ROOT_PATH ${MIKROSDK_PATH})
set(MIKROC_CORE_ROOT_PATH ${MIKROC_CORE_PATH})
#append to cmake_prefix_path
list(APPEND CMAKE_PREFIX_PATH ${MIKROSDK_ROOT_PATH})
list(APPEND CMAKE_PREFIX_PATH ${MIKROC_CORE_ROOT_PATH})

list(APPEND CMAKE_MODULE_PATH %CMAKE_MODULE_PATH_VALUE%)

%SDK_SETUP_BUILD_VALUE%
