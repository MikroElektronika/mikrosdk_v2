#############################################################################
## Checks if selected MCU has ETHERNET.
#############################################################################
function(check_eth_components has_eth eth_list)
    set(list_local "")
    set(has_eth "false" PARENT_SCOPE)

    if(${MCU_NAME} MATCHES "^STM32.+$")
        if(${MCU_NAME} MATCHES "^STM32F(107|[247][0-367][79]|7[4-6][56]).+$")
            set(has_eth "true" PARENT_SCOPE)
        endif()
    elseif(${MCU_NAME} MATCHES "^TM4C.+")
        if(${MCU_NAME} MATCHES "^TM4C129.+")
            set(has_eth "true" PARENT_SCOPE)
        endif()
    elseif(${MCU_NAME} MATCHES "^MK.+$")
        if(${MCU_NAME} MATCHES "^MK(6|V58).+$")
            set(has_eth "true" PARENT_SCOPE)
        endif ()
    else()
        message(WARNING ": Selected mcu (${MCU_NAME}) doesn't have Ethernet module.")
    endif()

    set(${eth_list} ${list_local} PARENT_SCOPE)
endfunction()

#############################################################################
## Disable MCUs without enough FLASH and/or RAM memory for ETHERNET.
#############################################################################
function(check_eth_requirements check_eth)
    set(${check_eth} "false" PARENT_SCOPE)

    ## TODO - Check for minimum memory requirements in the end / possibly increase/decrease here.
    set(check_flash 10239)    # 10KB
    set(check_ram 3071)    # 3KB

    if(NOT MCU_FLASH)
        message(FATAL_ERROR ": MCU_FLASH not added to database for ${MCU_NAME}.")
        if(NOT MCU_RAM)
            message(FATAL_ERROR ": MCU_RAM not added to database for ${MCU_NAME}.")
        endif()
    endif()

    if(${MCU_FLASH} GREATER_EQUAL check_flash)
        if(${MCU_RAM} GREATER_EQUAL check_ram)
            set(${check_eth} "true" PARENT_SCOPE)
        endif()
    endif()
endfunction()

#############################################################################
## Macro used to select phy chip for current HW if applicable.
#############################################################################
macro(get_eth_phy_chip phyChip)
    ## First, set phy chip as NULL.
    set(${phyChip} "NULL")

    ## Then, check if a board with a phy chip is selected i.e. a mikromedia.
    if(_MSDK_BOARD_NAME_)
        if(${_MSDK_BOARD_NAME_} MATCHES "^MIKROMEDIA[457]FOR(STM32F[47]|STM32F[47]CAPACITIVE|KINETISCAPACITIVE)$")
            set(${phyChip} "&lan8720PhyDriver")
        elseif(${_MSDK_BOARD_NAME_} MATCHES "^MIKROMEDIAPLUSFORSTM32(F7)?$")
            set(${phyChip} "&lan8720PhyDriver")
        endif()
    endif()

    ## Next, check if MCU CARD with a phy chip is selected.
    if(_MSDK_MCU_CARD_NAME_)
        if(${_MSDK_MCU_CARD_NAME_} MATCHES "^EASYMX_PRO_V7_FOR_STM32_MCUCARD_WITH_STM32F[1247].+$")
            set(${phyChip} "&lan8720PhyDriver")
        elseif(${_MSDK_MCU_CARD_NAME_} STREQUAL "MCU_CARD_FOR_STM32")
            set(${phyChip} "&lan8720PhyDriver")
        elseif(${_MSDK_MCU_CARD_NAME_} MATCHES "^MCU_CARD_(4|10|23|26|31)_FOR_STM32$")
            set(${phyChip} "&lan8720PhyDriver")
        elseif(${_MSDK_MCU_CARD_NAME_} STREQUAL "MCU_CARD_FOR_KINETIS")
            set(${phyChip} "&lan8720PhyDriver")
        elseif(${_MSDK_MCU_CARD_NAME_} MATCHES "^MCU_CARD_(3|10)_FOR_KINETIS$")
            set(${phyChip} "&lan8720PhyDriver")
        endif()
    endif()
endmacro()

#############################################################################
## Macro used to append additional CycloneTCP files.
#############################################################################
macro(ethernet_get_tcp_lib_files libSourceList libHeaderList)
    list(APPEND listLocalSources "./cyclone_tcp/core/tcp.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/net.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/net.c")
    list(APPEND listLocalSources "./cyclone_tcp/core/ip.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/net_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/net_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/net_mem.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/net_mem.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/nic.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/nic.c")
    list(APPEND listLocalSources "./cyclone_tcp/core/ip.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/ip.h")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/socket.h")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/socket.h")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv4/arp.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv4/arp.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv4/arp_cache.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv4/arp_cache.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/http_client.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_client.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/llmnr/llmnr_responder.h")
    list(APPEND listLocalSources "./cyclone_tcp/llmnr/llmnr_responder.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/llmnr/llmnr_common.h")
    list(APPEND listLocalSources "./cyclone_tcp/llmnr/llmnr_common.c")
endmacro()

#############################################################################
## Function used to set adequate CycloneTCP drivers per selected MCU.
#############################################################################
function(ethernet_get_device_lib_files libSourceList libHeaderList)
    set(listLocalSources "")
    set(listLocalHeaders "")

    list(APPEND listLocalHeaders "./eth_driver.h")
    list(APPEND listLocalHeaders "./arm/core/mpu_armv7.h")

    if(${CORE_NAME} STREQUAL "M3")
        list(APPEND listLocalHeaders "./arm/core/core_cm3.h")
    elseif(${CORE_NAME} STREQUAL "M4EF" OR ${CORE_NAME} STREQUAL "M4DSP")
        list(APPEND listLocalHeaders "./arm/core/core_cm4.h")
    elseif(${CORE_NAME} STREQUAL "M7")
        list(APPEND listLocalHeaders "./arm/core/core_cm7.h")
    endif()

    if(${MCU_NAME} MATCHES "^STM32.+$")
        list(APPEND listLocalHeaders "./arm/st/cmsis_version.h")
        list(APPEND listLocalHeaders "./arm/st/cmsis_compiler.h")
        list(APPEND listLocalHeaders "./arm/st/cmsis_gcc.h")
        if(${MCU_NAME} MATCHES "^STM32F4.+$")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx_hal_conf.h")
            list(APPEND listLocalHeaders "./arm/st/f4xx/Legacy/stm32_hal_legacy.h")
            list(APPEND listLocalHeaders "./arm/st/f4xx/system_stm32f4xx.h")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx_hal_rcc_ex.h")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx_hal_rcc.h")
            list(APPEND listLocalSources "./arm/st/f4xx/stm32f4xx_hal_rcc.c")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx_hal_gpio_ex.h")
            list(APPEND listLocalSources "./arm/st/f4xx/stm32f4xx_hal_gpio.c")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx_hal_gpio.h")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx_hal_def.h")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx.h")
            list(APPEND listLocalHeaders "./arm/st/f4xx/stm32f4xx_hal.h")
            list(APPEND listLocalSources "./arm/st/f4xx/stm32f4xx_hal.c")
        elseif(${MCU_NAME} MATCHES "^STM32F7.+$")
            list(APPEND listLocalHeaders "./arm/st/f7xx/Legacy/stm32_hal_legacy.h")
            list(APPEND listLocalHeaders "./arm/st/f7xx/system_stm32f7xx.h")
            list(APPEND listLocalSources "./arm/st/f7xx/system_stm32f7xx.c")
            list(APPEND listLocalHeaders "./arm/st/f7xx/stm32f7xx_hal_conf.h")
            list(APPEND listLocalHeaders "./arm/st/f7xx/stm32f7xx_hal_def.h")
            list(APPEND listLocalHeaders "./arm/st/f7xx/stm32f7xx_hal_gpio.h")
            list(APPEND listLocalSources "./arm/st/f7xx/stm32f7xx_hal_gpio.c")
            list(APPEND listLocalHeaders "./arm/st/f7xx/stm32f7xx_hal_gpio_ex.h")
            list(APPEND listLocalHeaders "./arm/st/f7xx/stm32f7xx_hal_rcc.h")
            list(APPEND listLocalSources "./arm/st/f7xx/stm32f7xx_hal_rcc.c")
            list(APPEND listLocalHeaders "./arm/st/f7xx/stm32f7xx_hal_rcc_ex.h")
            list(APPEND listLocalSources "./arm/st/f7xx/stm32f7xx_hal_rcc_ex.c")
            list(APPEND listLocalHeaders "./arm/st/f7xx/stm32f7xx.h")
        elseif(${MCU_NAME} MATCHES "^STM32F1.+$")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx.h")
            list(APPEND listLocalHeaders "./arm/st/f1xx/Legacy/stm32_hal_legacy.h")
            list(APPEND listLocalHeaders "./arm/st/f1xx/system_stm32f1xx.h")
            list(APPEND listLocalSources "./arm/st/f1xx/system_stm32f1xx.c")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx_hal.h")
            list(APPEND listLocalSources "./arm/st/f1xx/stm32f1xx_hal.c")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx_hal_conf.h")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx_hal_def.h")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx_hal_gpio.h")
            list(APPEND listLocalSources "./arm/st/f1xx/stm32f1xx_hal_gpio.c")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx_hal_gpio_ex.h")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx_hal_rcc.h")
            list(APPEND listLocalSources "./arm/st/f1xx/stm32f1xx_hal_rcc.c")
            list(APPEND listLocalHeaders "./arm/st/f1xx/stm32f1xx_hal_rcc_ex.h")
            list(APPEND listLocalSources "./arm/st/f1xx/stm32f1xx_hal_rcc_ex.c")
        elseif(${MCU_NAME} MATCHES "^STM32F2[01]7.+$")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx_hal_conf.h")
            list(APPEND listLocalHeaders "./arm/st/f2xx/Legacy/stm32_hal_legacy.h")
            list(APPEND listLocalHeaders "./arm/st/f2xx/system_stm32f2xx.h")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx_hal_rcc_ex.h")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx_hal_rcc.h")
            list(APPEND listLocalSources "./arm/st/f2xx/stm32f2xx_hal_rcc.c")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx_hal_gpio_ex.h")
            list(APPEND listLocalSources "./arm/st/f2xx/stm32f2xx_hal_gpio.c")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx_hal_gpio.h")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx_hal_def.h")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx.h")
            list(APPEND listLocalSources "./arm/st/f2xx/stm32f2xx_hal.c")
            list(APPEND listLocalHeaders "./arm/st/f2xx/stm32f2xx_hal.h")
        ## TODO Ethernet support for STM32H7 MCUs will be added in a future release.
        #  elseif(${MCU_NAME} MATCHES "^STM32H7.+$")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx.h")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/Legacy/stm32_hal_legacy.h")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/system_stm32h7xx.h")
        #     list(APPEND listLocalSources "./arm/st/h7xx/system_stm32h7xx.c")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx_hal.h")
        #     list(APPEND listLocalSources "./arm/st/h7xx/stm32h7xx_hal.c")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx_hal_conf.h")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx_hal_def.h")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx_hal_gpio.h")
        #     list(APPEND listLocalSources "./arm/st/h7xx/stm32h7xx_hal_gpio.c")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx_hal_gpio_ex.h")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx_hal_rcc.h")
        #     list(APPEND listLocalSources "./arm/st/h7xx/stm32h7xx_hal_rcc.c")
        #     list(APPEND listLocalHeaders "./arm/st/h7xx/stm32h7xx_hal_rcc_ex.h")
        #     list(APPEND listLocalSources "./arm/st/h7xx/stm32h7xx_hal_rcc_ex.c")
        endif()
    elseif(${MCU_NAME} MATCHES "^MK.+$")
        list(APPEND listLocalHeaders "./arm/nxp/cmsis_version.h")
        list(APPEND listLocalHeaders "./arm/nxp/cmsis_compiler.h")
        list(APPEND listLocalHeaders "./arm/nxp/cmsis_gcc.h")
        if(${MCU_NAME} MATCHES "^MKV58.+$")
            list(APPEND listLocalHeaders "./arm/nxp/mkv58/fsl_device_registers.h")
            list(APPEND listLocalHeaders "./arm/nxp/mkv58/MKV58F24.h")
            list(APPEND listLocalHeaders "./arm/nxp/mkv58/MKV58F24_features.h")
        elseif (${MCU_NAME} MATCHES "^MK60.+$")
            list(APPEND listLocalHeaders "./arm/nxp/mk60/fsl_device_registers.h")
            list(APPEND listLocalHeaders "./arm/nxp/mk60/MK60D10.h")
            list(APPEND listLocalHeaders "./arm/nxp/mk60/MK60D10_features.h")
            list(APPEND listLocalHeaders "./arm/nxp/mk60/MK60N512MD100.h")
        elseif(${MCU_NAME} MATCHES "^MK64.+$")
            list(APPEND listLocalHeaders "./arm/nxp/mk64/fsl_device_registers.h")
            list(APPEND listLocalHeaders "./arm/nxp/mk64/MK64F12.h")
            list(APPEND listLocalHeaders "./arm/nxp/mk64/MK64F12_features.h")
        elseif(${MCU_NAME} MATCHES "^MK65.+$")
            list(APPEND listLocalHeaders "./arm/nxp/mk65/fsl_device_registers.h")
            list(APPEND listLocalHeaders "./arm/nxp/mk65/MK65F18.h")
            list(APPEND listLocalHeaders "./arm/nxp/mk65/MK65F18_features.h")
        elseif(${MCU_NAME} MATCHES "^MK66.+$")
            list(APPEND listLocalHeaders "./arm/nxp/mk66/fsl_device_registers.h")
        endif ()
    elseif(${MCU_NAME} MATCHES "^TM4C129.+$")
        list(APPEND listLocalHeaders "./arm/ti/driverlib/interrupt.h")
        list(APPEND listLocalSources "./arm/ti/driverlib/interrupt.c")
        list(APPEND listLocalHeaders "./arm/ti/driverlib/cpu.h")
        list(APPEND listLocalSources "./arm/ti/driverlib/cpu.c")
        list(APPEND listLocalHeaders "./arm/ti/driverlib/sysctl.h")
        list(APPEND listLocalSources "./arm/ti/driverlib/sysctl.c")
        list(APPEND listLocalHeaders "./arm/ti/driverlib/gpio.h")
        list(APPEND listLocalSources "./arm/ti/driverlib/gpio.c")
        list(APPEND listLocalSources "./arm/ti/driverlib/pin_map.h")
        list(APPEND listLocalSources "./arm/ti/driverlib/debug.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_sysctl.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_nvic.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_gpio.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_memmap.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_emac.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_flash.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_ints.h")
        list(APPEND listLocalHeaders "./arm/ti/inc/hw_types.h")
        list(APPEND listLocalHeaders "./arm/ti/cmsis_version.h")
        list(APPEND listLocalHeaders "./arm/ti/cmsis_compiler.h")
        list(APPEND listLocalHeaders "./arm/ti/cmsis_gcc.h")
    else()
        message(FATAL_ERROR "ETH sources not set for ${MCU_NAME}. Set them in ${CMAKE_CURRENT_FUNCTION} function in ${CMAKE_CURRENT_FUNCTION_LIST_FILE}.")
    endif()

    set(${libSourceList} ${listLocalSources} PARENT_SCOPE)
    set(${libHeaderList} ${listLocalHeaders} PARENT_SCOPE)
endfunction()

#############################################################################
## Function used to set adequate CycloneTCP search paths per selected MCU.
#############################################################################
function(ethernet_get_device_lib_include_directories listOut selector)
    set(listLocalPaths "")
    set(prefix "")
    set(postfix "")

    if(${selector} STREQUAL "INTERFACE")
        set(prefix $<BUILD_INTERFACE:)
        set(postfix >)
    endif()

    list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/core${postfix})

    if(${MCU_NAME} MATCHES "^STM32.+$")
        list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st${postfix})
        if(${MCU_NAME} MATCHES "^STM32F4.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx${postfix})
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/Legacy${postfix})
        elseif(${MCU_NAME} MATCHES "^STM32F7.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx${postfix})
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/Legacy${postfix})
        elseif(${MCU_NAME} MATCHES "^STM32F1.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx${postfix})
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/Legacy${postfix})
        elseif(${MCU_NAME} MATCHES "^STM32F2.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx${postfix})
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/Legacy${postfix})
        ## TODO Ethernet support for STM32H7 MCUs will be added in a future release.
        # elseif(${MCU_NAME} MATCHES "^STM32H7.+$")
        #     list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx${postfix})
        endif()
    elseif(${MCU_NAME} MATCHES "^MK.+$")
        list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp${postfix})
        if(${MCU_NAME} MATCHES "^MKV58.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mkv58${postfix})
        elseif (${MCU_NAME} MATCHES "^MK60.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk60${postfix})
        elseif(${MCU_NAME} MATCHES "^MK64.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk64${postfix})
            elseif(${MCU_NAME} MATCHES "^MK65.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk65${postfix})
        elseif(${MCU_NAME} MATCHES "^MK66.+$")
            list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk66${postfix})
        endif()
    elseif(${MCU_NAME} MATCHES "^TM4C129.+$")
        list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/ti${postfix})
        list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc${postfix})
        list(APPEND listLocalPaths ${prefix}${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/driverlib${postfix})
    endif()

    set(${listOut} ${listLocalPaths} PARENT_SCOPE)
endfunction()

#################################################################################
## Function used to set adequate CycloneTCP library headers per enabled function.
#################################################################################
function(ethernet_get_header_list header_list selector)
    set(listLocal "")

    if(${selector} STREQUAL "COAP")
        ## COAP headers
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/coap/coap_common.h")
    elseif(${selector} STREQUAL "MIKROE_CONFIG")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/eth_driver.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/net_config.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/os_port_config.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/fs_port_config.h")
        if(${MCU_NAME} MATCHES "^STM32.+$")
            string(SUBSTRING ${MCU_NAME} 0 9 MCU_NAME_OPT)
            string(TOLOWER ${MCU_NAME_OPT} MCU_HEADER)
            set(SECOND_LETTER "x")
            if(${MCU_NAME} MATCHES "^STM32F107.+$")
                set(SECOND_LETTER "c")
            endif()
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/${MCU_HEADER}x${SECOND_LETTER}.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/cmsis_compiler.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/cmsis_gcc.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/cmsis_version.h")
            if(${MCU_NAME} MATCHES "^STM32F1.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal_conf.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal_cortex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal_def.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal_gpio.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal_gpio_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal_rcc.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/stm32f1xx_hal_rcc_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f1xx/system_stm32f1xx.h")
            elseif(${MCU_NAME} MATCHES "^STM32F2.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal_conf.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal_cortex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal_def.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal_gpio.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal_gpio_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal_rcc.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/stm32f2xx_hal_rcc_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f2xx/system_stm32f2xx.h")
            elseif(${MCU_NAME} MATCHES "^STM32F4.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal_conf.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal_cortex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal_def.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal_gpio.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal_gpio_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal_rcc.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/stm32f4xx_hal_rcc_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f4xx/system_stm32f4xx.h")
            elseif(${MCU_NAME} MATCHES "^STM32F7.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx_hal.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx_hal_conf.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx_hal_def.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx_hal_gpio.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx_hal_gpio_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx_hal_rcc.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/stm32f7xx_hal_rcc_ex.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/f7xx/system_stm32f7xx.h")
            ## TODO Ethernet support for STM32H7 MCUs will be added in a future release.
            # elseif(${MCU_NAME} MATCHES "^STM32H7.+$")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_conf.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_cortex.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_def.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_eth.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_eth_ex.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_gpio.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_gpio_ex.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_rcc.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/stm32h7xx_hal_rcc_ex.h")
            #     list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/st/h7xx/system_stm32h7xx.h")
            endif()
        elseif(${MCU_NAME} MATCHES "^MK.+$")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/cmsis_compiler.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/cmsis_gcc.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/cmsis_version.h")
            if(${MCU_NAME} MATCHES "^MK60.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk60/fsl_device_registers.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk60/MK60D10.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk60/MK60D10_features.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk60/MK60N512MD100.h")
            elseif(${MCU_NAME} MATCHES "^MK64.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk64/fsl_device_registers.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk64/MK64F12.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk64/MK64F12_features.h")
            elseif(${MCU_NAME} MATCHES "^MK66.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk66/fsl_device_registers.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk66/MK66F18.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mk66/MK66F18_features.h")
            elseif(${MCU_NAME} MATCHES "^MKV58.+$")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mkv58/fsl_device_registers.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mkv58/MKV58F24.h")
                list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/nxp/mkv58/MKV58F24_features.h")
            endif()
        elseif(${MCU_NAME} MATCHES "^TM4C129.+$")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/cmsis_compiler.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/cmsis_gcc.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/cmsis_version.h")
            ## driverlib
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/driverlib/cpu.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/driverlib/debug.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/driverlib/gpio.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/driverlib/interrupt.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/driverlib/pin_map.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/driverlib/sysctl.h")
            ## inc
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_emac.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_flash.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_gpio.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_ints.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_memmap.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_nvic.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_sysctl.h")
            list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/arm/ti/inc/hw_types.h")
        endif()
    elseif(${selector} STREQUAL "COMMON")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/compiler_port.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/cpu_endian.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/date_time.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/debug.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/error.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/fs_port.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/os_port.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/os_port_none.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/path.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/resource_manager.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/common/str.h")
    elseif(${selector} STREQUAL "CORE")
        ## Core headers
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/bsd_socket.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/bsd_socket_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/bsd_socket_options.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ethernet.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ethernet_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ip.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net_legacy.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net_mem.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/nic.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ping.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/raw_socket.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/socket.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/socket_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp_fsm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp_timer.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/udp.h")
    elseif(${selector} STREQUAL "DHCP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_client_fsm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_debug.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_server.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_server_misc.h")
    elseif(${selector} STREQUAL "DHCPV6")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_client_fsm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_debug.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_relay.h")
    elseif(${selector} STREQUAL "DNS")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_cache.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_debug.h")
    elseif(${selector} STREQUAL "DNS_SD")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns_sd/dns_sd.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns_sd/dns_sd_misc.h")
    elseif(${selector} STREQUAL "ECHO")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/echo/echo_server.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/echo/echo_server_misc.h")
    elseif(${selector} STREQUAL "FTP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_client_transport.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_commands.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_control.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_data.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_transport.h")
    elseif(${selector} STREQUAL "HTTP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client_auth.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client_transport.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_server.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_server_auth.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_server_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/mime.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/ssi.h")
    elseif(${selector} STREQUAL "ICECAST")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/icecast/icecast_client.h")
    elseif(${selector} STREQUAL "IGMP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_host.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_host_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_router.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_router_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_snooping.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_snooping_misc.h")
    elseif(${selector} STREQUAL "IPV4")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/arp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/arp_cache.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/auto_ip.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/auto_ip_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/icmp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4_frag.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4_routing.h")
    elseif(${selector} STREQUAL "IPV6")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/icmpv6.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_frag.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_pmtu.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_routing.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/mld.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_cache.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_router_adv.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_router_adv_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/slaac.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/slaac_misc.h")
    elseif(${selector} STREQUAL "LLDP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_debug.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_dot1.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_dot3.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_med.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_pno.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_fsm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_mgmt.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_procedures.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_rx_fsm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_tlv.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_tx_fsm.h")
    elseif(${selector} STREQUAL "LLMNR")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/llmnr/llmnr_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/llmnr/llmnr_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/llmnr/llmnr_responder.h")
    elseif(${selector} STREQUAL "MDNS")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_responder.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_responder_misc.h")
    elseif(${selector} STREQUAL "MIBS")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/if_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/if_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/ip_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/ip_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_config.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_local.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_remote.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_stats.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_if.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_ip.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_sys.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_tcp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_udp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_community_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_community_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_framework_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_framework_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mpd_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mpd_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_usm_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_usm_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_vacm_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_vacm_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/tcp_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/tcp_mib_module.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/udp_mib_impl.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/udp_mib_module.h")
    elseif(${selector} STREQUAL "MODBUS")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client_pdu.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client_transport.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_debug.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_pdu.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_security.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_transport.h")
    elseif(${selector} STREQUAL "MQTT")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client_packet.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client_transport.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_common.h")
    elseif(${selector} STREQUAL "MQTT_SN")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client_message.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client_transport.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_debug.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_message.h")
    elseif(${selector} STREQUAL "NETBIOS")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/netbios/nbns_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/netbios/nbns_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/netbios/nbns_responder.h")
    elseif(${selector} STREQUAL "PPP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/chap.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ipcp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ipv6cp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/lcp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/pap.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_debug.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_fsm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_hdlc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_misc.h")
    elseif(${selector} STREQUAL "SMTP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client_auth.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client_transport.h")
    elseif(${selector} STREQUAL "SNMP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_dispatch.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_inform.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_message.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_object.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_pdu.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_trap.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_usm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_vacm.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_common.h")
    elseif(${selector} STREQUAL "SNTP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/sntp/ntp_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/sntp/sntp_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/sntp/sntp_client_misc.h")
    elseif(${selector} STREQUAL "SYSLOG")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/syslog/syslog_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/syslog/syslog_client_misc.h")
    elseif(${selector} STREQUAL "TFTP")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_client.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_client_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_common.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_server.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_server_misc.h")
    elseif(${selector} STREQUAL "WEB_SOCKET")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_auth.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_frame.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_misc.h")
        list(APPEND listLocal "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_transport.h")
    endif()

    set(${header_list} ${listLocal} PARENT_SCOPE)
endfunction()

#############################################################################
## Macro used to install adequate CycloneTCP library headers.
#############################################################################
macro(ethernet_install_headers list_in destination)
    install(
        FILES
            ${list_in}
        DESTINATION
            ${destination}
    )
endmacro()

#############################################################################
## Macro used to fetch adequate CycloneTCP GPIO init API.
#############################################################################
macro(find_gpio_eth_implementation listOut)
    if(${MCU_NAME} MATCHES "^STM32.+$")
        if(${MCU_NAME} MATCHES "^STM32F4.+$")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f4xx_eth_driver.c")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f4xx_eth_driver.h")
        elseif(${MCU_NAME} MATCHES "^STM32F7.+$")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f7xx_eth_driver.c")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f7xx_eth_driver.h")
        elseif(${MCU_NAME} MATCHES "^STM32F1.+$")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f1xx_eth_driver.c")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f1xx_eth_driver.h")
        elseif(${MCU_NAME} MATCHES "^STM32F2.+$")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f2xx_eth_driver.c")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32f2xx_eth_driver.h")
        ## TODO Ethernet support for STM32H7 MCUs will be added in a future release.
        # elseif(${MCU_NAME} MATCHES "^STM32H7.+$")
        #     list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32h7xx_eth_driver.c")
        #     list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/stm32h7xx_eth_driver.h")
        endif()
    elseif(${MCU_NAME} MATCHES "^MK.+$")
        if(${MCU_NAME} MATCHES "^MK6.+$")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/mk6x_eth_driver.c")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/mk6x_eth_driver.h")
        elseif(${MCU_NAME} MATCHES "^MKV58.+$")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/mkv5x_eth_driver.c")
            list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/mkv5x_eth_driver.h")
        endif ()
    elseif(${MCU_NAME} MATCHES "^TM4C129.+$")
        list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/tm4c129_eth_driver.c")
        list(APPEND ${listOut} "./cyclone_tcp/drivers/mac/tm4c129_eth_driver.h")
    endif()
endmacro()

#############################################################################
## Function used to select appropriate driver header file.
#############################################################################
function(set_active_driver fileDestination fileList)
    set(MACRO_LIST "ETH_DRIVER_NONE")

    if(${MCU_NAME} MATCHES "^STM32.+$")
        if(${MCU_NAME} MATCHES "^STM32F4.+$")
            set(MACRO_LIST "#include \"drivers/mac/stm32f4xx_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER stm32f4xxEthDriver")
        elseif(${MCU_NAME} MATCHES "^STM32F7.+$")
            set(MACRO_LIST "#include \"drivers/mac/stm32f7xx_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER stm32f7xxEthDriver")
        elseif(${MCU_NAME} MATCHES "^STM32F1.+$")
            set(MACRO_LIST "#include \"drivers/mac/stm32f1xx_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER stm32f1xxEthDriver")
        elseif(${MCU_NAME} MATCHES "^STM32F2.+$")
            set(MACRO_LIST "#include \"drivers/mac/stm32f2xx_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER stm32f2xxEthDriver")
        ## TODO Ethernet support for STM32H7 MCUs will be added in a future release.
        # elseif(${MCU_NAME} MATCHES "^STM32H7.+$")
        #     set(MACRO_LIST "#include \"drivers/mac/stm32h7xx_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER stm32h7xxEthDriver")
        endif()
    elseif(${MCU_NAME} MATCHES "^TM4C129.+$")
        set(MACRO_LIST "#include \"drivers/mac/tm4c129_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER tm4c129EthDriver")
    elseif(${MCU_NAME} MATCHES "^MK.+$")
        if(${MCU_NAME} MATCHES "^MKV58.+$")
            set(MACRO_LIST "#include \"drivers/mac/mkv5x_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER mkv5xEthDriver")
        elseif (${MCU_NAME} MATCHES "^MK6.+$")
            set(MACRO_LIST "#include \"drivers/mac/mk6x_eth_driver.h\"\n#define ETHERNET_DRIVER_HANDLER mk6xEthDriver")
        endif ()
    endif()

    ## Generate output file with adequate name and include directive.
    configure_file(${PROJECT_SOURCE_DIR}/cmake/InstallHeadersEthDriver.cmake.in ${fileDestination}/${fileList})
endfunction()

#############################################################################
## Function used to select appropriate main source/header files.
#############################################################################
function(eth_get_main_files sources headers)
    set(listLocalSources "")
    set(listLocalHeaders "")

    ethernet_get_tcp_lib_files(listLocalSources listLocalHeaders)

    list(APPEND listLocalSources "./common/os_port_none.c")
    list(APPEND listLocalHeaders "./common/os_port_none.h")
    list(APPEND listLocalHeaders "./common/os_port.h")
    list(APPEND listLocalHeaders "./common/compiler_port.h")
    list(APPEND listLocalHeaders "./common/error.h")
    list(APPEND listLocalHeaders "./common/cpu_endian.h")
    list(APPEND listLocalSources "./common/cpu_endian.c")
    list(APPEND listLocalHeaders "./common/date_time.h")
    list(APPEND listLocalSources "./common/date_time.c")
    list(APPEND listLocalHeaders "./common/str.h")
    list(APPEND listLocalSources "./common/str.c")
    list(APPEND listLocalHeaders "./common/path.h")
    list(APPEND listLocalSources "./common/path.c")
    list(APPEND listLocalHeaders "./common/resource_manager.h")
    list(APPEND listLocalSources "./common/resource_manager.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/net_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/net_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/net_mem.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/net_mem.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/socket.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/socket.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/socket_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/socket_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/udp.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/udp.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/tcp_fsm.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/tcp_fsm.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/tcp_timer.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/tcp_timer.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/tcp_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/tcp_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/ethernet.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/ethernet.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/core/ethernet_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/core/ethernet_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv4/ipv4.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv4/ipv4.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv4/icmp.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv4/icmp.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv4/ipv4_frag.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv4/ipv4_frag.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv4/ipv4_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv4/ipv4_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/ipv6_frag.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/ipv6_frag.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/ipv6_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/ipv6_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/mld.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/mld.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/ndp.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/ndp.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/ndp_cache.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/ndp_cache.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/ndp_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/ndp_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/ipv6.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/ipv6.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/icmpv6.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/icmpv6.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/ipv6_pmtu.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/ipv6_pmtu.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/slaac_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/slaac_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ipv6/slaac.h")
    list(APPEND listLocalSources "./cyclone_tcp/ipv6/slaac.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/dns/dns_cache.h")
    list(APPEND listLocalSources "./cyclone_tcp/dns/dns_cache.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/dns/dns_client.h")
    list(APPEND listLocalSources "./cyclone_tcp/dns/dns_client.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/dns/dns_common.h")
    list(APPEND listLocalSources "./cyclone_tcp/dns/dns_common.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/igmp/igmp_common.h")
    list(APPEND listLocalSources "./cyclone_tcp/igmp/igmp_common.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/igmp/igmp_host.h")
    list(APPEND listLocalSources "./cyclone_tcp/igmp/igmp_host.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/igmp/igmp_host_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/igmp/igmp_host_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/dhcp/dhcp_client_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/dhcp/dhcp_client_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/dhcp/dhcp_client_fsm.h")
    list(APPEND listLocalSources "./cyclone_tcp/dhcp/dhcp_client_fsm.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/dhcp/dhcp_common.h")
    list(APPEND listLocalSources "./cyclone_tcp/dhcp/dhcp_common.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/dhcp/dhcp_client.h")
    list(APPEND listLocalSources "./cyclone_tcp/dhcp/dhcp_client.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/http_client_transport.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_client_transport.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/http_client.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_client.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ftp/ftp_client.h")
    list(APPEND listLocalSources "./cyclone_tcp/ftp/ftp_client.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/ftp/ftp_client_transport.h")
    list(APPEND listLocalSources "./cyclone_tcp/ftp/ftp_client_transport.c")
    list(APPEND listLocalSources "./cyclone_tcp/ftp/ftp_client_misc.c")
    list(APPEND listLocalSources "./cyclone_tcp/ftp/ftp_client_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/mime.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/mime.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/http_server.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_server.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/http_server_auth.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_server_auth.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/http_server_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_server_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/http/http_client_misc.h")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_client_misc.c")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_common.c")
    list(APPEND listLocalSources "./cyclone_tcp/http/http_common.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/netbios/nbns_client.h")
    list(APPEND listLocalHeaders "./cyclone_tcp/netbios/nbns_client.h")
    list(APPEND listLocalSources "./cyclone_tcp/netbios/nbns_client.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/netbios/nbns_common.h")
    list(APPEND listLocalSources "./cyclone_tcp/netbios/nbns_common.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/netbios/nbns_responder.h")
    list(APPEND listLocalSources "./cyclone_tcp/netbios/nbns_responder.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/llmnr/llmnr_responder.h")
    list(APPEND listLocalSources "./cyclone_tcp/llmnr/llmnr_responder.c")
    list(APPEND listLocalSources "./cyclone_tcp/echo/echo_server.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/echo/echo_server.h")
    list(APPEND listLocalSources "./cyclone_tcp/echo/echo_server_misc.c")
    list(APPEND listLocalHeaders "./cyclone_tcp/echo/echo_server_misc.h")

    find_gpio_eth_implementation(listLocalSources)

    set(${sources} ${listLocalSources} PARENT_SCOPE)
    set(${headers} ${listLocalHeaders} PARENT_SCOPE)
endfunction()

#############################################################################
## Function used to select appropriate main source/header files.
#############################################################################
function(eth_get_files listOut selector)
    set(listLocal "")
    set(filePathHw "unimplemented")

    if(${selector} STREQUAL "PHY")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/upd60611_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/tja1100_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/tja1101_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/rtl8211f_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/st802rt1a_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/rtl8211e_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/mv88e1512_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/pef7071_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8742_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8770_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8830_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8841_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8740_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8671_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8672_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8700_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8710_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz9031_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz9131_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8670_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8091_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8721_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8051_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8061_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8081_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ip101_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8031_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8041_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83tc812_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83td510_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83tc811_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83867_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83869_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83640_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83822_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83825_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83826_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dm9162_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83620_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83630_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dm9161_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ar8035_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ar8031_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/adin1300_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/adin1100_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/adin1200_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/upd60611_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/tja1101_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/tja1100_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/st802rt1a_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/rtl8211f_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/rtl8211e_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/pef7071_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/mv88e1512_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8841_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8830_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8770_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8742_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8740_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8720_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8720_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8710_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8700_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8672_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8671_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/lan8670_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz9131_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz9031_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8721_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8091_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8081_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8061_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8051_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8041_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ksz8031_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ip101_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83td510_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83tc812_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83tc811_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83869_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83867_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83848_driver.h")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83848_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83826_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83825_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83822_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83640_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83630_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dp83620_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dm9162_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/dm9161_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ar8035_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/ar8031_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/adin1300_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/adin1200_driver.c")
        list(APPEND listLocal "./cyclone_tcp/drivers/phy/adin1100_driver.c")
    elseif(${selector} STREQUAL "HW")
        if(${MCU_NAME} MATCHES "^STM32.+")
            if(${MCU_NAME} MATCHES "^STM32F107.+$")
                set(filePathHw "arm/st/implementation_3")
            elseif(${MCU_NAME} MATCHES "^STM32F2[01]7.+")
                set(filePathHw "arm/st/implementation_2")
            elseif(${_MSDK_BOARD_NAME_} MATCHES "^MIKROMEDIA(7|PLUS)FORSTM32(F4|F7)?")
                set(filePathHw "arm/st/implementation_4")
            else()
                set(filePathHw "arm/st/implementation_1")
            endif()
        elseif(${MCU_NAME} MATCHES "^MK.+$")
            if(${MCU_NAME} MATCHES "^MKV58.+$")
                set(filePathHw "arm/nxp/implementation_3")
            elseif(${MCU_NAME} MATCHES "^MK6(0|4).+$")
                set(filePathHw "arm/nxp/implementation_1")
            elseif(${MCU_NAME} MATCHES "^MK66.+$")
                set(filePathHw "arm/nxp/implementation_2")
            elseif(${MCU_NAME} MATCHES "^MK65.+$")
                ## TODO - MK65 implementation needs to be added manually.
                ## `unimplemented` shall be included in project.
            endif()
        elseif(${MCU_NAME} MATCHES "^TM4C129.+$")
            set(filePathHw "arm/ti/implementation_1")
        endif()

        list(APPEND listLocal ${filePathHw})
    endif()

    set(${listOut} ${listLocal} PARENT_SCOPE)
endfunction()

#############################################################################
## Function used to fetch additional project level defines if needed.
#############################################################################
function(get_plds plds)
    set(pldsLocal "")

    list(APPEND pldsLocal "__PROJECT_MIKROSDK_MIKROE__")

    list(APPEND pldsLocal "FsFile=void")
    list(APPEND pldsLocal "FsDir=void")

    if(${MCU_NAME} MATCHES "^STM32.+")
        string(SUBSTRING ${MCU_NAME} 0 9 MCU_NAME_OPT)
        string(SUBSTRING ${MCU_NAME} 0 7 MCU_FAMILY)
        list(APPEND pldsLocal "${MCU_FAMILY}")
        if(${MCU_NAME} MATCHES "^STM32F107.+")
            list(APPEND pldsLocal "${MCU_NAME_OPT}xC") # This covers both 107xC and 107xB MCUs
        else()
            list(APPEND pldsLocal "${MCU_NAME_OPT}xx")
        endif()
    elseif(${MCU_NAME} MATCHES "^MK.+$")
        list(APPEND pldsLocal "CPU_${MCU_NAME}")
    elseif(${MCU_NAME} MATCHES "^TM4C129.+$")
        list(APPEND pldsLocal "PART_${MCU_NAME}")
        list(APPEND pldsLocal "CLASS_IS_TM4C129")
    endif()

    set(${plds} ${pldsLocal} PARENT_SCOPE)
endfunction()

#############################################################################
## Macro used to install adequate CycloneTCP Legacy headers.
#############################################################################
macro(ethernet_install_legacy_headers destination)
    if(${MCU_NAME} MATCHES "^STM32.+")
        string(SUBSTRING ${MCU_NAME} 5 2 MCU_LEGACY_DIR)
        string(TOLOWER ${MCU_LEGACY_DIR} MCU_LEGACY)
        install(
            FILES
                ${CMAKE_CURRENT_SOURCE_DIR}/arm/st/${MCU_LEGACY}xx/Legacy/stm32_hal_legacy.h
            DESTINATION
                ${destination}
        )
    endif()
endmacro()

#############################################################################
## Macro used to get adequate CycloneTCP headers for Tiva MCUs.
#############################################################################
macro(ethernet_get_ti_headers headers_list param_dir)
    if(${MCU_NAME} MATCHES "^TM4C129.+")
        if(${param_dir} STREQUAL "DRIVERLIB")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/interrupt.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/interrupt.c")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/cpu.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/cpu.c")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/sysctl.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/sysctl.c")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/gpio.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/gpio.c")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/pin_map.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/driverlib/debug.h")
        elseif(${param_dir} STREQUAL "INC")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_sysctl.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_nvic.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_gpio.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_memmap.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_emac.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_flash.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_ints.h")
            list(APPEND ${headers_list} "${CMAKE_SOURCE_DIR}/api/ethernet/config/arm/ti/inc/hw_types.h")
        endif()
    endif()
endmacro()

#############################################################################
## Macro used to get CycloneTCP library headers.
#############################################################################
macro(ethernet_get_headers list_out)
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/coap/coap_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/compiler_port.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/cpu_endian.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/date_time.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/debug.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/error.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/fs_port.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/os_port.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/os_port_none.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/path.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/resource_manager.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/common/str.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ethernet.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ethernet_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ip.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net_legacy.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net_mem.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/net_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/nic.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/ping.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/raw_socket.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/socket.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/socket_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp_fsm.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/tcp_timer.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/udp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_client_fsm.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_debug.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_server.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcp/dhcp_server_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_client_fsm.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_debug.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dhcpv6/dhcpv6_relay.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_cache.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns/dns_debug.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns_sd/dns_sd.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/dns_sd/dns_sd_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/echo/echo_server.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/echo/echo_server_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_client_transport.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_commands.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_control.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_data.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ftp/ftp_server_transport.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client_auth.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_client_transport.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_server.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_server_auth.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/http_server_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/mime.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/http/ssi.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/icecast/icecast_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_host.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_host_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_router.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_router_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_snooping.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/igmp/igmp_snooping_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/arp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/arp_cache.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/auto_ip.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/auto_ip_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/icmp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4_frag.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv4/ipv4_routing.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/icmpv6.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_frag.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_pmtu.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ipv6_routing.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/mld.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_cache.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_router_adv.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/ndp_router_adv_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/slaac.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ipv6/slaac_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client_pdu.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_client_transport.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_debug.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_pdu.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_security.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/modbus/modbus_server_transport.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client_packet.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_client_transport.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt/mqtt_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client_message.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_client_transport.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_debug.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mqtt_sn/mqtt_sn_message.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/netbios/nbns_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/netbios/nbns_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/netbios/nbns_responder.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/chap.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ipcp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ipv6cp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/lcp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/pap.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_debug.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_fsm.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_hdlc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/ppp/ppp_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/syslog/syslog_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/syslog/syslog_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_client.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_client_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_common.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_server.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/tftp/tftp_server_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_auth.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_frame.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_misc.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/web_socket/web_socket_transport.h")
    ## INFO: Files not meant to be included together. Left to user to include desired ones.
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client_auth.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client_misc.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/smtp/smtp_client_transport.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_dispatch.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_inform.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_message.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_misc.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_object.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_pdu.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_trap.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_usm.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_agent_vacm.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/snmp/snmp_common.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/sntp/ntp_common.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/sntp/sntp_client.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/sntp/sntp_client_misc.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/bsd_socket.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/bsd_socket_misc.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/core/bsd_socket_options.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_debug.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_dot1.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_dot3.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_med.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_ext_pno.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_fsm.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_mgmt.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_misc.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_procedures.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_rx_fsm.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_tlv.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/lldp/lldp_tx_fsm.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/llmnr/llmnr_client.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/llmnr/llmnr_common.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/llmnr/llmnr_responder.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_client.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_common.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_responder.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mdns/mdns_responder_misc.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/if_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/if_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/ip_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/ip_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_config.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_local.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_remote.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_impl_stats.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/lldp_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib_common.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_if.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_ip.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_sys.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_tcp.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_impl_udp.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/mib2_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_community_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_community_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_framework_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_framework_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mpd_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_mpd_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_usm_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_usm_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_vacm_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/snmp_vacm_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/tcp_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/tcp_mib_module.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/udp_mib_impl.h")
    # list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/mibs/udp_mib_module.h")
endmacro()

#############################################################################
## Macro used to get CycloneTCP mac headers.
#############################################################################
macro(ethernet_get_mac_headers list_out)
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/a2fxxxm3_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/am335x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/am64x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/apm32f4xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/aps3_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/at32f4xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/avr32_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/efm32gg11_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/esp32_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/f28m35x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/fm3_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/fm3_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/fm4_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/gd32e5xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/gd32f2xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/gd32f3xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/gd32f4xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lm3s_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lpc175x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lpc176x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lpc178x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lpc18xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lpc23xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lpc43xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/lpc54xxx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/m2sxxx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/m487_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mcf5225x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mcimx6ul_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mcimx6ul_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1020_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1040_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1050_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1060_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1060_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1160_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1160_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1170_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mimxrt1170_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mk6x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mk7x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mkv5x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mpc5748_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mpc5748_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mpfsxxx_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/mpfsxxx_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/msp432e4_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/nuc472_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/omapl138_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/pic32ck_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/pic32cx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/pic32cz_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/pic32mx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/pic32mz_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/ra6_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/rm57_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/rx62n_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/rx63n_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/rx65n_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/rza1_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/s32k1_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/s5d9_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/s7g2_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/s7g2_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sam3x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sam4e_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sam7x_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sam9263_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sam9x60_eth1_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sam9x60_eth2_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sama5d2_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sama5d3_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/sama5d3_geth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/same53_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/same54_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/same70_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/samv71_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32f1xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32f2xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32f4xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32f4xx_hal_cortex.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32f7xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32h5xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32h7xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/stm32mp1xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/str912_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/tc2xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/tc3xx_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/tm4c129_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/tms570_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/xmc4400_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/xmc4500_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/xmc4700_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/xmc4800_eth_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/mac/zynq7000_eth_driver.h")

endmacro()

#############################################################################
## Macro used to get CycloneTCP phy headers.
#############################################################################
macro(ethernet_get_phy_headers list_out)
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/adin1100_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/adin1200_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/adin1300_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ar8031_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ar8035_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dm9161_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dm9162_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83620_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83630_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83640_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83822_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83825_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83826_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83848_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83867_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83869_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83tc811_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83tc812_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/dp83td510_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ip101_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz8031_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz8041_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz8051_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz8061_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz8081_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz8091_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz8721_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz9031_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/ksz9131_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8670_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8671_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8672_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8700_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8710_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8720_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8740_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8742_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8770_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8830_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/lan8841_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/mv88e1512_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/pef7071_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/rtl8211e_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/rtl8211f_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/st802rt1a_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/tja1100_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/tja1101_driver.h")
    list(APPEND ${list_out} "${CMAKE_CURRENT_SOURCE_DIR}/cyclone_tcp/drivers/phy/upd60611_driver.h")
endmacro()
